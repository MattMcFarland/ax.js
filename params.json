{"name":"Ax.js","tagline":"A RESTful, ajax micro browser library that is under 2kb.","body":"![Ax.js](http://i.imgur.com/twliVZx.png)\r\n\r\n RESTful, AJAX, microscopic yet flexible browser library.\r\n* [Usage](#ax)\r\n* [Examples](#examples)\r\n\r\nInstallation:\r\n* [Browser](#browser)\r\n* [NodeJS](#nodejs)\r\n* [UMD / AMD Module](#commonjs)\r\n\r\n## Ax\r\n\r\n```javascript\r\nvar request = new Ax( Object || Arguments); \r\n```\r\n\r\n### Arguments Method\r\n\r\n```javascript\r\nvar request = new Ax(method, url, [data], [type], done);\r\n```\r\n\r\n#### Arguments\r\n\r\n1. method *(String)*: http request (e.g., GET, PUT, POST, PATCH, DELETE, etc...)\r\n2. url *(String)*: location/href \r\n3. [data] *(Object|JSON)*: required if uploading data to the server\r\n4. [type] *(String)*: Content-Type header (default is application/json)\r\n5. done *(Function)* Callback when request is finished, is always the *last argument* passed.\r\n\r\n### Object Method\r\n\r\nSimilar approach, see [arguments](#arguments) above for explanation of values...\r\n\r\n```javascript\r\nvar request = new Ax({\r\n  method: method,\r\n  url: url,\r\n  data: [data],\r\n  type: [type],\r\n  done: done\r\n}, [done]);\r\n```\r\nNOTE:  the *done* callback can either be an ```object property``` in the first argument, or the *last* argument; but not both.  If a function is detected as the *last* argument, Ax will use that and ignore the other.\r\n\r\n### Callback\r\n\r\nThe *done* callback function is passed as the *last* argument.\r\n\r\n```javascript\r\nvar request = new Ax(...args, function (res, xhr, err) {\r\n  // Single error detection\r\n  if (err) {\r\n    // Whoops lets do something\r\n  }\r\n  console.log('response is', res);\r\n});\r\n```\r\n\r\nIt may also be part of the options object\r\n\r\n```javascript\r\nvar request = new Ax({\r\n  ...options,\r\n  done: function (res, xhr, err) {    \r\n    if (err) console.error(err);\r\n    console.log(res, xhr);\r\n  }\r\n});\r\n```\r\n## Examples\r\n\r\nGet user data...\r\n\r\n```javscript\r\nvar request = new Ax('GET', '/users/' + userid', function (res, xhr, err) {\r\n  if (err) {\r\n    // An error has occurred\r\n  } else {\r\n    var userdata = res;\r\n    // Do something with user data.\r\n  }\r\n});\r\n```\r\n\r\nUpdate a user profile...\r\n```javascript\r\nnew Ax({\r\n  method: 'PUT',\r\n  url: userUrl,\r\n  data: newData,,\r\n  done: callBack()\r\n});\r\n```\r\n\r\n\r\nPost a form...\r\n```javscript\r\nvar request = new Ax('POST', '/submit/', formData, function (res, xhr, err) {\r\n  if (err) {\r\n    alert ('total failure', err);\r\n  } else {\r\n    console.log('server response is', res);\r\n  }\r\n});\r\n```\r\n\r\n## Installation\r\nInstallation can be as simple as an HTML ```<script>``` tag, or used with a UMD/AMD library like requirejs.  My personal favorite is usage with nodejs ;)\r\n\r\n### Browser\r\n\r\n```\r\n<script src=\"ax.min.js\"></script>\r\n```\r\n\r\n\r\n\r\n### NodeJS\r\n\r\nAx.js has been built with browserify, and works with both browserify and webpack.\r\n\r\nInstall via npm:\r\n\r\n```\r\nnpm install axjs\r\n```\r\n\r\n*require* the module \r\n``` javascript\r\nvar Ax = require('axjs');\r\n```\r\n\r\n### CommonJS\r\n\r\nAx.js can be *required* in with a UMD or AMD library like requirejs.\r\n\r\n``` javascript\r\nvar Ax = require('ax');\r\n```\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}